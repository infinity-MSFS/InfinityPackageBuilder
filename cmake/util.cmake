function(check_and_init_submodule submodule_path submodule_name)
    find_program(GIT_EXECUTABLE git)
    if (NOT GIT_EXECUTABLE)
        message(FATAL_ERROR "Git is required to initialize submodules but was not found.")
    endif ()
    if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${submodule_path}/.git")
        message("${Yellow}${submodule_name} submodule not initialized. Cloning it now...${ColorReset}")
        execute_process(COMMAND git submodule update --init --recursive ${submodule_path}
                WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
                RESULT_VARIABLE GIT_SUBMODULE_RESULT)
        if (NOT GIT_SUBMODULE_RESULT EQUAL "0")
            message(FATAL_ERROR "Failed to initialize submodule: ${submodule_name}. Please ensure Git is available and try again.")
        else ()
            message("${Blue}Submodule: ${Green}${submodule_name} ${Blue}initialized successfully.${ColorReset}")
        endif ()
    else ()
        message("${Blue}Submodule: ${Green}${submodule_name} ${Blue}is initialized.${ColorReset}")
    endif ()
endfunction()


function(load_encryption_key_from_env_file)
    if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/.env")
        file(READ "${CMAKE_CURRENT_SOURCE_DIR}/.env" ENV_FILE)

        string(REGEX MATCH "ENCRYPTION_KEY=([A-Za-z0-9]+)" _match "${ENV_FILE}")
        set(ENCRYPTION_KEY ${CMAKE_MATCH_1})

        if (ENCRYPTION_KEY)
            message("${Blue}ENCRYPTION_KEY found, defining: ${Green}ENCRYPTION_KEY${ColorReset}")
            add_compile_definitions(ENCRYPTION_KEY="${ENCRYPTION_KEY}")
        else ()
            message(FATAL_ERROR "ENCRYPTION_KEY is not set. Please set it in the .env file.")
        endif ()
    else ()
        message(FATAL_ERROR ".env file is missing. Please create the file with necessary variables.")
    endif ()
endfunction()

function(print_system_dependencies_info)
    if (Vulkan_FOUND)
        message("${Blue}Vulkan Version: ${Green}${Vulkan_VERSION} ${Blue}Include: ${Green}${Vulkan_INCLUDE_DIRS} ${Blue}Lib: ${Green}${Vulkan_LIBRARY}${ColorReset}")
    else ()
        message(FATAL_ERROR "CURL Not Found")
    endif ()

    if (CURL_FOUND)
        message("${Blue}Curl Version: ${Green}${CURL_VERSION_STRING} ${Blue}Include: ${Green}${CURL_INCLUDE_DIRS} ${Blue}Lib: ${Green}${CURL_LIBRARIES}${ColorReset}")
    else ()
        message(FATAL_ERROR "CURL Not Found")
    endif ()

    if (OPENSSL_FOUND)
        message("${Blue}Open SSL Version: ${Green}${OPENSSL_VERSION} ${Blue}Include: ${Green}${OPENSSL_INCLUDE_DIR} ${Blue}Lib: ${Green}${OPENSSL_SSL_LIBRARY}${ColorReset}")
    else ()
        message(FATAL_ERROR "Open SSL Not Found")
    endif ()
endfunction()